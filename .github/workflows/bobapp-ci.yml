name: CI/CD Pipeline for BobApp

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE_NAME: ocr-back
  FRONTEND_IMAGE_NAME: ocr-front

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and Test Backend
        run: |
          cd back
          mvn clean compile test jacoco:report

      - name: Upload Backend Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            back/target/site/jacoco/
            back/target/surefire-reports/
            back/target/classes/
          retention-days: 1

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "16"
          cache: "npm"
          cache-dependency-path: front/package-lock.json

      - name: Install Frontend Dependencies
        run: |
          cd front
          npm ci

      - name: Run Frontend Tests
        run: |
          cd front
          npm run test -- --no-watch --no-progress --browsers=ChromeHeadless --code-coverage

      - name: Upload Frontend Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/
          retention-days: 1

  sonar-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download Backend Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: back/target/

      - name: Download Frontend Coverage Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=Zakaryalahmadi_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD
            -Dsonar.organization=zakaryalahmadi
            -Dsonar.coverage.jacoco.xmlReportPaths=back/target/site/jacoco/jacoco.xml
            -Dsonar.javascript.lcov.reportPaths=front/coverage/lcov.info

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [sonar-analysis]

    steps:
      - uses: actions/checkout@v4
      - name: build image
        run: |
          docker build ./back/ -t  ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest 
          docker build ./front/ -t ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: push image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE_NAME }}:latest
